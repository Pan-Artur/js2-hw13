{"mappings":"ACEmB,CAAA,KACjB,IAAM,EAAQ,AAAC,GAGN,IAAI,QAAQ,CAAC,EAAS,KAC3B,WAAW,KAEP,EAAQ,EAIZ,EAAG,EACL,GAGI,EAAS,AAAC,GAAS,QAAQ,GAAG,CAAC,CAAC,eAAe,EAAE,EAAK,EAAE,CAAC,EAG/D,EAAM,KAAM,IAAI,CAAC,GACjB,EAAM,KAAM,IAAI,CAAC,GACjB,EAAM,MAAM,IAAI,CAAC,EACnB,CAAA,IA8BA,AAxBmB,CAAA,KACjB,IAAM,EAAQ,CACZ,CAAE,KAAM,QAAS,OAAQ,CAAA,CAAK,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAM,EAC9B,CAAE,KAAM,OAAQ,OAAQ,CAAA,CAAK,EAC7B,CAAE,KAAM,MAAO,OAAQ,CAAA,CAAM,EAC9B,CAEK,EAAkB,CAAC,EAAU,IAC1B,IAAI,QAAQ,AAAC,IAKlB,EAJqB,EAAS,GAAG,CAAC,AAAC,GACjC,EAAK,IAAI,GAAK,EAAW,CAAE,GAAG,CAAI,CAAE,OAAQ,CAAC,EAAK,MAAM,AAAC,EAAI,GAIjE,GAGI,EAAS,AAAC,GAAiB,QAAQ,KAAK,CAAC,GAE/C,EAAgB,EAAO,SAAS,IAAI,CAAC,GACrC,EAAgB,EAAO,OAAO,IAAI,CAAC,EACrC,CAAA,IA4CA,AAtCmB,CAAA,KACjB,IAAM,EAA4B,CAAC,EAAK,IAC/B,KAAK,KAAK,CAAC,KAAK,MAAM,GAAM,CAAA,EAAM,EAAM,CAAA,EAAK,GAGhD,EAAkB,AAAC,GAChB,IAAI,QAAQ,CAAC,EAAS,KAC3B,IAAM,EAAQ,EAA0B,IAAK,KAE7C,WAAW,KACU,KAAK,MAAM,GAAK,GAGjC,EAAQ,CAAE,GAAI,EAAY,EAAE,CAAE,KAAM,CAAM,GAE1C,EAAO,EAAY,EAAE,CAEzB,EAAG,EACL,GAGI,EAAa,CAAC,CAAA,GAAE,CAAE,CAAA,KAAE,CAAI,CAAE,IAC9B,QAAQ,GAAG,CAAC,CAAC,YAAY,EAAE,EAAG,cAAc,EAAE,EAAK,EAAE,CAAC,CACxD,EAEM,EAAW,AAAC,IAChB,QAAQ,IAAI,CAAC,CAAC,6BAA6B,EAAE,EAAG,yBAAyB,CAAC,CAC5E,EAEA,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAEhE,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAEhE,EAAgB,CAAE,GAAI,GAAI,OAAQ,EAAG,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,GAE/D,EAAgB,CAAE,GAAI,GAAI,OAAQ,GAAI,GAAG,IAAI,CAAC,GAAY,KAAK,CAAC,EAClE,CAAA","sources":["<anon>","src/index.js"],"sourcesContent":["var $35da740d59af89ba$exports = {};\n// Task 1\nconst $35da740d59af89ba$var$startTask1 = ()=>{\n    const delay = (ms)=>{\n        const isSuccess = true;\n        return new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                if (isSuccess) resolve(ms);\n                else reject(\"\\u041F\\u043E\\u043C\\u0438\\u043B\\u043A\\u0430!\");\n            }, ms);\n        });\n    };\n    const logger = (time)=>console.log(`Resolved after ${time}ms`);\n    // Виклич функції для перевірки\n    delay(2000).then(logger); // Resolved after 2000ms\n    delay(1000).then(logger); // Resolved after 1000ms\n    delay(1500).then(logger); // Resolved after 1500ms\n};\n$35da740d59af89ba$var$startTask1();\n// Task 2\nconst $35da740d59af89ba$var$startTask2 = ()=>{\n    const users = [\n        {\n            name: \"Mango\",\n            active: true\n        },\n        {\n            name: \"Poly\",\n            active: false\n        },\n        {\n            name: \"Ajax\",\n            active: true\n        },\n        {\n            name: \"Lux\",\n            active: false\n        }\n    ];\n    const toggleUserState = (allUsers, userName)=>{\n        return new Promise((resolve)=>{\n            const updatedUsers = allUsers.map((user)=>user.name === userName ? {\n                    ...user,\n                    active: !user.active\n                } : user);\n            resolve(updatedUsers);\n        });\n    };\n    const logger = (updatedUsers)=>console.table(updatedUsers);\n    toggleUserState(users, \"Mango\").then(logger);\n    toggleUserState(users, \"Lux\").then(logger);\n};\n$35da740d59af89ba$var$startTask2();\n// Task 3\nconst $35da740d59af89ba$var$startTask3 = ()=>{\n    const randomIntegerFromInterval = (min, max)=>{\n        return Math.floor(Math.random() * (max - min + 1) + min);\n    };\n    const makeTransaction = (transaction)=>{\n        return new Promise((resolve, reject)=>{\n            const delay = randomIntegerFromInterval(200, 500);\n            setTimeout(()=>{\n                const canProcess = Math.random() > 0.3;\n                if (canProcess) resolve({\n                    id: transaction.id,\n                    time: delay\n                });\n                else reject(transaction.id);\n            }, delay);\n        });\n    };\n    const logSuccess = ({ id: id, time: time })=>{\n        console.log(`Transaction ${id} processed in ${time}ms`);\n    };\n    const logError = (id)=>{\n        console.warn(`Error processing transaction ${id}. Please try again later.`);\n    };\n    makeTransaction({\n        id: 70,\n        amount: 150\n    }).then(logSuccess).catch(logError);\n    makeTransaction({\n        id: 71,\n        amount: 230\n    }).then(logSuccess).catch(logError);\n    makeTransaction({\n        id: 72,\n        amount: 75\n    }).then(logSuccess).catch(logError);\n    makeTransaction({\n        id: 73,\n        amount: 100\n    }).then(logSuccess).catch(logError);\n};\n$35da740d59af89ba$var$startTask3();\n\n\n//# sourceMappingURL=index.ac56b3f5.js.map\n","// Task 1\n\nconst startTask1 = () => {\n  const delay = (ms) => {\n    const isSuccess = true;\n\n    return new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (isSuccess) {\n          resolve(ms);\n        } else {\n          reject(\"Помилка!\");\n        }\n      }, ms);\n    });\n  };\n\n  const logger = (time) => console.log(`Resolved after ${time}ms`);\n\n  // Виклич функції для перевірки\n  delay(2000).then(logger); // Resolved after 2000ms\n  delay(1000).then(logger); // Resolved after 1000ms\n  delay(1500).then(logger); // Resolved after 1500ms\n};\n\nstartTask1();\n\n// Task 2\n\nconst startTask2 = () => {\n  const users = [\n    { name: \"Mango\", active: true },\n    { name: \"Poly\", active: false },\n    { name: \"Ajax\", active: true },\n    { name: \"Lux\", active: false },\n  ];\n\n  const toggleUserState = (allUsers, userName) => {\n    return new Promise((resolve) => {\n      const updatedUsers = allUsers.map((user) =>\n        user.name === userName ? { ...user, active: !user.active } : user\n      );\n\n      resolve(updatedUsers);\n    });\n  };\n\n  const logger = (updatedUsers) => console.table(updatedUsers);\n\n  toggleUserState(users, \"Mango\").then(logger);\n  toggleUserState(users, \"Lux\").then(logger);\n};\n\nstartTask2();\n\n// Task 3\n\nconst startTask3 = () => {\n  const randomIntegerFromInterval = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n  };\n\n  const makeTransaction = (transaction) => {\n    return new Promise((resolve, reject) => {\n      const delay = randomIntegerFromInterval(200, 500);\n\n      setTimeout(() => {\n        const canProcess = Math.random() > 0.3;\n\n        if (canProcess) {\n          resolve({ id: transaction.id, time: delay });\n        } else {\n          reject(transaction.id);\n        }\n      }, delay);\n    });\n  };\n\n  const logSuccess = ({ id, time }) => {\n    console.log(`Transaction ${id} processed in ${time}ms`);\n  };\n\n  const logError = (id) => {\n    console.warn(`Error processing transaction ${id}. Please try again later.`);\n  };\n\n  makeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\n  makeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\n  makeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\n  makeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n};\n\nstartTask3();\n"],"names":["delay","ms","Promise","resolve","reject","setTimeout","logger","time","console","log","then","$35da740d59af89ba$var$startTask2","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","$35da740d59af89ba$var$startTask3","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","id","logSuccess","logError","warn","amount","catch"],"version":3,"file":"index.ac56b3f5.js.map"}